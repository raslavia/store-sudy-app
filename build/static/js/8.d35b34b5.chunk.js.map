{"version":3,"sources":["pages/shop/shop.component.jsx"],"names":["CollectionsOverviewContainer","lazy","CollectionPageContainer","connect","dispatch","fetchCollectionsStart","match","useEffect","className","fallback","exact","path","component"],"mappings":"sHAAA,2DAOMA,EAA+BC,gBAAK,kBACxC,gCAEIC,EAA0BD,gBAAK,kBACnC,iCA6BaE,sBAAQ,MAJI,SAAAC,GAAQ,MAAK,CACtCC,sBAAuB,kBAAMD,EAASC,mBAGzBF,EA1BE,SAAC,GAAsC,IAApCE,EAAmC,EAAnCA,sBAAuBC,EAAY,EAAZA,MAKzC,OAJAC,qBAAU,WACRF,MACC,CAACA,IAGF,yBAAKG,UAAU,aACb,kBAAC,WAAD,CAAUC,SAAU,kBAAC,IAAD,OAClB,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAI,UAAKL,EAAMK,MACfC,UAAWZ,IAEb,kBAAC,IAAD,CACEW,KAAI,UAAKL,EAAMK,KAAX,kBACJC,UAAWV","file":"static/js/8.d35b34b5.chunk.js","sourcesContent":["import React, { useEffect, lazy, Suspense } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport { fetchCollectionsStart } from \"../../redux/shop/shop.actions\";\nimport Spinner from \"../../components/spinner/spinner.component\";\n\nconst CollectionsOverviewContainer = lazy(() =>\n  import(\"../../components/collections-overview/collections-overview.container\")\n);\nconst CollectionPageContainer = lazy(() =>\n  import(\"../collection/collection.container\")\n);\n\nconst ShopPage = ({ fetchCollectionsStart, match }) => {\n  useEffect(() => {\n    fetchCollectionsStart();\n  }, [fetchCollectionsStart]);\n\n  return (\n    <div className='shop-page'>\n      <Suspense fallback={<Spinner />}>\n        <Route\n          exact\n          path={`${match.path}`}\n          component={CollectionsOverviewContainer}\n        />\n        <Route\n          path={`${match.path}/:collectionId`}\n          component={CollectionPageContainer}\n        />\n      </Suspense>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCollectionsStart: () => dispatch(fetchCollectionsStart()),\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);\n\n// import { fetchCollectionsStartAsync } from \"../../redux/shop/shop.actions\";\n// import {\n//   selectIsCollectionFetching,\n//   selectIsCollectionsLoaded,\n// } from \"../../redux/shop/shop.selectors\";\n\n// import CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\n// import CollectionPage from \"../collection/collection.component\";\n\n// import WithSpinner from \"../../components/with-spinner/with-spinner.component\";\n// const CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\n// const CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\n// class ShopPage extends React.Component {\n//   componentDidMount() {\n//     const { fetchCollectionsStartAsync } = this.props;\n\n//     fetchCollectionsStartAsync();\n//   }\n//   render() {\n//     const { match, isCollectionFetching, isCollectionLoaded } = this.props;\n//     return (\n//       <div className='shop-page'>\n//         <Route\n//           exact\n//           path={`${match.path}`}\n//           render={props => (\n//             <CollectionsOverviewWithSpinner\n//               isLoading={isCollectionFetching}\n//               {...props}\n//             />\n//           )}\n//         />\n//         <Route\n//           path={`${match.path}/:collectionId`}\n//           render={props => (\n//             <CollectionPageWithSpinner\n//               isLoading={!isCollectionLoaded}\n//               {...props}\n//             />\n//           )}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// const mapStateToProps = createStructuredSelector({\n//   isCollectionFetching: selectIsCollectionFetching,\n//   isCollectionLoaded: selectIsCollectionsLoaded,\n// });\n\n// const mapDispatchToProps = dispatch => ({\n//   fetchCollectionsStartAsync: () => dispatch(fetchCollectionsStartAsync()),\n// });\n"],"sourceRoot":""}